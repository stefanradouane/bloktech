{"version":3,"sources":["getSpotify.js"],"names":["console","log","clientId","clientSecret","async","getCategory","result","fetch","method","headers","Authorization","btoa","body","token","json","access_token","eind","categories","items","html","forEach","categorie","htmlSegment","id","name","icons","url","document","querySelector","innerHTML","maincat","mainLijst","tracks","muziek","getTracks","listItems","querySelectorAll","playListCategories","catID","innerText","push","res","getPlaylist","Promise","all","then","data","link","undefined","playlists","lijst","tracksEndPoint","href","getMuziek","array","tracky","track","liLike","liDislike","trackId","checklist","li","likeId","dislikeId","newSet","Set","checkArray","Array","from","CheckTwo","newTrackId","meth2","includes","value","filter","item","showTrack","previewUrl","preview_url","artists","album","images","meth","ShowOne","CreateOne","mainLikes","likes","getLikeList","nummerId","LikeList","likeSection","audiocontrol"],"mappings":"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","file":"all.js","sourcesContent":["console.log(\"hoi\");\n\n// const askToken = async () => {\n//     const result = await fetch('https://accounts.spotify.com/api/token', {\n//                 method: 'POST',\n//                 headers: {\n//                     'Content-Type' : 'application/x-www-form-urlencoded',\n//                     'Authorization' : 'Basic ' + btoa(clientId + ':' + clientSecret)\n//                 },\n//                 body: 'grant_type=client_credentials'\n//             });\n//         const log = await result.json();\n//         const token = log.access_token;\n//         console.log(token)\n// };\n\n// body.addEventListener('load', async(e)=>{\n//     console.log(askToken + '1')\n// })\n\n// const APIcontrol = (function(){\n//     const _getToken = async () => {\n//         const result = await fetch('https://accounts.spotify.com/api/token', {\n//                 method: 'POST',\n//                 headers: {\n//                     'Content-Type' : 'application/x-www-form-urlencoded',\n//                     'Authorization' : 'Basic ' + btoa(clientId + ':' + clientSecret)\n//                 },\n//                 body: 'grant_type=client_credentials'\n//             });\n//         const data = await result.json();\n//         // console.log(token)\n//         return data.acces_token;\n//     };\n\n//     return {\n//         getToken() {\n//             return _getToken();\n//         }\n//     }\n// })();\n\nconst clientId = \"97827c6f27404e7a8ce75a072081a151\";\nconst clientSecret = \"9d4531501fd94595a45632324e3387b5\";\n\n// const form = document.querySelector('form');\n// var labelCheck = document.querySelector('label');\n\n// const token = '';\n\nasync function getCategory() {\n    const result = await fetch(\"https://accounts.spotify.com/api/token\", {\n        method: \"POST\",\n        headers: {\n            \"Content-Type\": \"application/x-www-form-urlencoded\",\n            Authorization: \"Basic \" + btoa(clientId + \":\" + clientSecret),\n        },\n        body: \"grant_type=client_credentials\",\n    });\n    const log = await result.json();\n    const token = log.access_token;\n    // console.log(token);\n    const eind = await fetch(\n        \"https://api.spotify.com/v1/browse/categories?country=NL\", {\n            method: \"GET\",\n            headers: {\n                Authorization: \"Bearer \" + token\n            },\n        }\n    );\n    // console.log(token);\n    const data = await eind.json();\n    const categories = data.categories.items;\n\n    // Renderfunction shamellysly copy pasted van het internet\n    let html = \"\";\n\n    categories.forEach((categorie) => {\n        let htmlSegment = `<div class=\"container\">\n                                    <label for=\"${categorie.id}\">\n                                        <p>${categorie.name}</p>\n                                        <img src=\"${categorie.icons[0].url}\"/>\n                                    </label>\n                                    <input type=\"checkbox\" name=\"categorie\" value=\"${categorie.id}\" id=\"${categorie.name}\">\n                                </div>`;\n        html += htmlSegment;\n    });\n    let buttonToEnd = \"<button>Verstuur</button>\";\n    html += buttonToEnd;\n    let form = document.querySelector(\"form.categorie\");\n    form.innerHTML = html;\n}\n\nconst maincat = document.querySelector(\"main.start\");\n\nif (maincat) {\n    getCategory();\n}\n\nconst mainLijst = document.querySelector(\"main.muziekLijst\");\n\nif (mainLijst) {\n    let tracks = [];\n    let muziek = [];\n\n    async function getTracks() {\n        // GetTOKEN\n        const result = await fetch(\"https://accounts.spotify.com/api/token\", {\n            method: \"POST\",\n            headers: {\n                \"Content-Type\": \"application/x-www-form-urlencoded\",\n                Authorization: \"Basic \" + btoa(clientId + \":\" + clientSecret),\n            },\n            body: \"grant_type=client_credentials\",\n        });\n        const log = await result.json();\n        const token = log.access_token;\n        console.log(token);\n\n        let listItems = document.querySelectorAll(\"li.categorie\");\n\n        async function getPlaylist(catID) {\n            const res = await fetch(\n                `https://api.spotify.com/v1/browse/categories/${catID}/playlists?limit=1`, {\n                    method: \"GET\",\n                    headers: {\n                        Authorization: \"Bearer \" + token\n                    },\n                }\n            );\n            const eind = await res.json();\n            return eind;\n        }\n\n        const playListCategories = [];\n\n        listItems.forEach((categorie) => {\n            const catID = categorie.innerText;\n            playListCategories.push(getPlaylist(catID));\n        });\n\n        Promise.all(playListCategories).then((data) => {\n            // console.log(data);\n            data.forEach((link) => {\n                if (link.playlists == undefined) {\n                    // console.log('skip')\n                    return;\n                } else {\n                    const afspeellijst = link.playlists.items;\n                    afspeellijst.forEach((lijst) => {\n                        const tracksEndPoint = lijst.tracks.href;\n                        tracks.push(getMuziek(tracksEndPoint));\n                    });\n                }\n            });\n\n            async function getMuziek(tracksEndPoint) {\n                const res = await fetch(`${tracksEndPoint}`, {\n                    method: \"GET\",\n                    headers: {\n                        Authorization: \"Bearer \" + token\n                    },\n                });\n                const eind = await res.json();\n                const trackArray = eind.items;\n                return trackArray;\n            }\n\n            Promise.all(tracks).then((data) => {\n                data.forEach((array) => {\n                    // console.log(array)\n                    array.forEach((tracky) => {\n                        const track = tracky.track;\n                        muziek.push(track);\n                    });\n                });\n\n                function CreateOne() {\n                    let liLike = document.querySelectorAll(\"li.like\");\n                    let liDislike = document.querySelectorAll(\"li.dislike\");\n                    console.log(liLike);\n                    console.log(liDislike);\n                    const trackId = muziek[0].id;\n                    let checklist = [];\n\n                    liLike.forEach((li) => {\n                        const likeId = li.innerText;\n                        checklist.push(likeId);\n                    });\n\n                    liDislike.forEach((li) => {\n                        const dislikeId = li.innerText;\n                        checklist.push(dislikeId);\n                    });\n\n                    console.log(checklist);\n                    const newSet = new Set(checklist);\n                    const checkArray = Array.from(newSet);\n                    console.log(checkArray);\n\n                    function ShowOne() {\n                        const meth = checkArray.includes(trackId);\n                        if (meth == true) {\n                            console.log(\"match\");\n                            // functie haal uit lijst en start opnieuw\n                            const value = muziek[0];\n                            muziek = muziek.filter(function (item) {\n                                return item != value;\n                            });\n\n                            CheckTwo(muziek);\n                        } else if (meth == false) {\n                            showTrack(muziek);\n                        }\n                    }\n\n                    ShowOne();\n\n                    function CheckTwo(muziek) {\n                        const newTrackId = muziek[0].id;\n                        const meth2 = checkArray.includes(newTrackId);\n                        if (meth2 == true) {\n                            const value = muziek[0];\n                            muziek = muziek.filter(function (item) {\n                                return item != value;\n                            });\n                            CheckTwo(muziek);\n                        } else if (meth2 == false) {\n                            showTrack(muziek);\n                        }\n                    }\n\n                    function showTrack(muziek) {\n                        console.log(muziek[0]);\n                        const track = muziek[0];\n\n                        const previewUrl = track.preview_url;\n\n                        let html = \"\";\n                        // Artiest foreach loopje\n                        let htmlSegment = `<section class=\"figure\">\n                                                <section>\n                                                    <section>\n                                                        <h2>${track.name}</h2>\n                                                        <h3>${track.artists[0].name}</h3>\n                                                        <form action=\"/ontdek\" method=\"post\">\n                                                            <input type=\"hidden\" name=\"trackId\" value=\"${track.id}\">\n                                                            <input type=\"submit\" name=\"like\" value=\"like\">\n                                                            <input type=\"submit\" name=\"dislike\" value=\"dislike\">\n                                                        </form>\n                                                    </section>\n                                                    <section>\n                                                        <img src=\"${track.album.images[0].url}\" alt=\"\">\n                                                    </section>\n                                                </section>\n                                                <section>`;\n                        html += htmlSegment;\n                        if (previewUrl == null) {\n                            let audioErr = `<h3>Geen preview beschikbaar</h3>\n                                            </section>\n                                            </section>`;\n                            html += audioErr;\n                        } else {\n                            let audiocontrol = `<audio controls>\n                                                        <source src=\"${previewUrl}\" type=\"audio/ogg\">\n                                                    </audio>\n                                                </section>\n                                            </section>`;\n                            html += audiocontrol;\n                        }\n                        mainLijst.innerHTML = html;\n                    }\n\n                    // const checkLiked = () => {\n                    //     liLike.forEach(li => {\n\n                    //         if(likeId == trackId){\n                    //             const methode = \"liked\";\n                    //             method.push(methode)\n                    //             console.log(method)\n                    //         } else{\n                    //             checkDisLiked()\n                    //             console.log('no like yet')\n                    //         }\n                    //     })\n                    // };\n\n                    // const checkDisLiked = () => {\n                    //     liDislike.forEach(li => {\n                    //         const dislikeId = li.innerText;\n                    //         if(dislikeId == trackId){\n                    //             const methode = \"disliked\";\n                    //             method.push(methode)\n                    //             console.log(method)\n                    //         } else{\n                    //             console.log('no touch')\n                    //         }\n                    //     })\n                    // }\n\n                    // checkLiked();\n\n                    // Check voor Like\n                    // Check voor dislike\n                    // No like or dislike == POST\n                }\n\n                if (muziek == []) {\n                    return;\n                } else {\n                    CreateOne();\n                }\n            });\n        });\n    }\n    getTracks();\n\n    // Promise.all(muziek).then(data => {\n    //     console.log(data)\n    //     console.log(muziek)\n    // })\n}\n\nconst mainLikes = document.querySelector(\"main.likes\");\n\nlet likes = [];\n\nif (mainLikes) {\n    const likeId = document.querySelectorAll(\"li.likeId\");\n\n    async function getLikeList() {\n        const result = await fetch(\"https://accounts.spotify.com/api/token\", {\n            method: \"POST\",\n            headers: {\n                \"Content-Type\": \"application/x-www-form-urlencoded\",\n                Authorization: \"Basic \" + btoa(clientId + \":\" + clientSecret),\n            },\n            body: \"grant_type=client_credentials\",\n        });\n        const log = await result.json();\n        const token = log.access_token;\n\n        likeId.forEach((id) => {\n            const nummerId = id.innerText;\n            console.log(nummerId);\n            likes.push(LikeList(nummerId));\n        });\n\n        async function LikeList(nummerId) {\n            const res = await fetch(`https://api.spotify.com/v1/tracks/${nummerId}`, {\n                method: \"GET\",\n                headers: {\n                    Authorization: \"Bearer \" + token\n                },\n            });\n            const eind = await res.json();\n            // const trackArray = eind.items;\n            return eind;\n        }\n\n        let html = \"\";\n        const likeSection = document.querySelector(\"section.likes\");\n\n        Promise.all(likes).then((data) => {\n            data.forEach((track) => {\n                console.log(track);\n                const previewUrl = track.preview_url;\n                let htmlSegment = `<section class=\"likeSection\">\n                                        <section>\n                                            <section>\n                                                <h2>${track.name}</h2>\n                                                <h3>${track.artists[0].name}</h3>\n                                                <form action=\"/likes\" method=\"post\">\n                                                    <input type=\"hidden\" name=\"trackId\" value=\"${track.id}\">\n                                                    <input type=\"submit\" name=\"delete\" value=\"delete\">\n                                                </form>\n                                            </section>\n                                            <section>\n                                                <img src=\"${track.album.images[0].url}\" alt=\"\">\n                                            </section>\n                                        </section>\n                                        <section>`;\n                html += htmlSegment;\n                if (previewUrl == null) {\n                    let audioErr = `<h3>Geen preview beschikbaar</h3>\n                                    </section>\n                                </section>`;\n                    html += audioErr;\n                } else {\n                    let audiocontrol = `<audio controls>\n                                                <source src=\"${track.preview_url}\" type=\"audio/ogg\">\n                                            </audio>\n                                        </section>\n                                    </section>`;\n                    html += audiocontrol;\n                }\n                likeSection.innerHTML = html;\n            });\n        });\n    }\n    getLikeList();\n\n    // const Id = likeId.innerText;\n}\n\n// <!-- Functie om kaartjes te maken --!>\n\n// tracks.forEach(track => {\n//     console.log(track);\n// })\n\n// module.exports = ((nummers));\n\n// const _getGenre = sync\n\n// console.log(token);\n// const eind = await fetch(`https://api.spotify.com/v1/browse/categories?country=NL`, {\n//     method: 'GET',\n//     headers: { 'Authorization' : 'Bearer ' + token}\n// });\n// // console.log(token);\n// data = await eind.json();\n// console.log(data.categories.items);\n// return data.categories;\n\n// console.log(_getToken())"]}